#include <iostream>
#include <string.h>
#include "functions.h"
using namespace std;

int main()
{
    string key = "59454C4C4F57205355424D4152494E45"; //YELLOW SUBMARINE
    string encrypted_text
    int subdivisions = encrypted_text.length()/32;
    int initialKey[4][4];
    int expandedKey[4][44];
    int encryptedArray[4][subdivisions*4];
    int decryptedArray[4][4];
    vector<int> temp_Vec;
    std::string temp1;
    std::string temp2;

    HexStringto4x4Array(key, initialKey);

    ExpandKey(initialKey, expandedKey);

    // encrypted text into a [4][n] int array
    // Creating the array
    for (int i = 0; i < subdivisions; i++)
    {
        int Counter = 0;
        temp1 = encrypted_text.substr(i*32,32);
        // cout << temp1 << endl;
        for (int i = 0; i < temp1.length() / 2; i++)
        {
            temp2 = temp1.substr(i * 2, 2);
            long n = strtol(temp2.c_str(), NULL, 16);
            temp_Vec.push_back(n);
        }

        for (int j = 0; j < 4; j++)
        {
            for (int k = 0; k < 4; k++)
            {
                encryptedArray[k][i*4 + j] = temp_Vec[Counter];
                Counter++;
            }
        }
        temp_Vec.clear();
    }

    //printing the array
    // for (int i = 0; i < 4; i++)
    // {
    //     for (int j = 0; j < subdivisions*4; j++)
    //     {
    //         cout << hex << encryptedArray[i][j] << "\t";
    //     }
    //     cout << endl;       
    // }

    // Encryption
    // XOR i*16 through i*16+16 with IV
    // encrypt i*16 through i*16+16
    // set IV to encrypted text

    int tempDecryptingArray[4][4];
    int tempIVArray[4][4];
    int initialIVArray[4][4] = {0};
    int plainTextArray[4][4];


    for (int i = 0; i < 4*subdivisions; i+=4)
    {
        for (int j = 0; j < 4; j++)
        {
            for (int k = 0; k < 4; k++)
            {
                tempDecryptingArray[k][j] = encryptedArray[k][i + j];
                tempIVArray[k][j] = encryptedArray[k][i + j];
            }
        }
        DecryptAES128BitArray(tempDecryptingArray, expandedKey, decryptedArray);

        XOR4x4Array(decryptedArray, initialIVArray, plainTextArray);

        cout << hexArraytoAscii(plainTextArray);

        copy4x4Array(tempIVArray, initialIVArray);
    }
}